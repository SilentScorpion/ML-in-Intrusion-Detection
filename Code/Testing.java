
import java.awt.Desktop;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import weka.core.Instance;
import weka.core.Instances;
import weka.classifiers.Evaluation;
//import weka.classifiers.evaluation.output.predictions.*;
import weka.classifiers.Classifier;
import weka.gui.AttributeVisualizationPanel;
import java.io.*;
import javax.swing.JProgressBar;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.meta.FilteredClassifier;
import weka.core.Instance;
import weka.filters.unsupervised.instance.RemoveMisclassified;
import weka.classifiers.evaluation.output.prediction.PlainText;
import weka.classifiers.evaluation.output.prediction.CSV;
        /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Ajay
 */
public class Testing extends javax.swing.JFrame {

    /**
     * Creates new form Testing
     */
    public int progress=0;
    public Testing() {
        initComponents();
        jMenu1.add("List of Attacks");
        jMenu1.add("WorkFlow Schematic");
        jMenu1.add("Thesis paper");
        jMenu1.add("Exit");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jDialog2 = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jDialog1.setBounds(new java.awt.Rectangle(400, 400, 331, 206));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Please select a valid training set");

        jButton6.setText("OK");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addGap(23, 23, 23))
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jDialog2.setTitle("Improved Detection rates of R2L and U2R attack for Naive Bayes Classification using Feature Selection");
        jDialog2.setAlwaysOnTop(true);
        jDialog2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jDialog2.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("About");
        jDialog2.getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 53, 30));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("Improved Detection rates of R2L and U2R attacks\nfor Naive Bayes Classification using feature Selection\n\nGenetic Algorithm used for Feature Selection\n\nA project by\nAjay Kamath (M.Tech Information Security)\n132112207\n\n\n\n\n\n");
        jScrollPane2.setViewportView(jTextArea2);

        jDialog2.getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 47, 498, 214));

        try {
            jInternalFrame1.setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        jInternalFrame1.setVisible(true);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("About");

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jTextArea3.setText("Improved Detection rates of R2L and U2R attacks\nfor Naive Bayes Classification using feature Selection\n\nGenetic Algorithm used for Feature Selection\n\nA project by\nAjay Kamath (M.Tech Information Security)\n132112207\n\n\n\n\n\n");
        jScrollPane3.setViewportView(jTextArea3);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE))
                .addContainerGap())
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Multi-Stage Naive Bayesian Classifier using WEKA");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("Classifier Output");

        jButton3.setText("Run Stage 2 Classifier");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Browse");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton1.setText("View Summary");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton5.setText("Run Classifier");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setText("Select the Training Set");

        jProgressBar1.setStringPainted(true);

        jButton7.setText("Browse Test Dataset");
        jButton7.setToolTipText("");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Re-evaluate model on test dataset");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Print MisClassified instances");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jButton7)
                                .addGap(26, 26, 26)
                                .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 96, Short.MAX_VALUE))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton5)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addGap(9, 9, 9)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton9))
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
this.hide();
BayesClassifiertwo bc=new BayesClassifiertwo();
bc.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        JFileChooser open = new JFileChooser(); // open up a file chooser (a dialog for the user to browse files to open)
			int option = open.showOpenDialog(this); // get the option that the user selected (approve or cancel)
			// NOTE: because we are OPENing a file, we call showOpenDialog~
			// if the user clicked OK, we have "APPROVE_OPTION"
			// so we want to open the file
			if(!open.getSelectedFile().getPath().endsWith("arff"))
                        {
                            //jDialog1.show();
                            jDialog1.setVisible(true);
                            
                        }// TODO add your handling code here:
                        else if (option == JFileChooser.APPROVE_OPTION) {
				jTextField1.setText(open.getSelectedFile().getPath()); // clear the TextArea before applying the file contents
				
    }
    
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
try {                                         
            BufferedReader tr = null;
            try {
                tr = new BufferedReader(new FileReader(jTextField1.getText()));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }
            Instances training=new Instances(tr);
            tr.close();
            //te.close();
            training.setClassIndex(training.numAttributes()-1);
            jTextArea1.setText("Relation name: "+training.relationName());          //Prints the relation name. NSL-KDDTrain.arff
            jTextArea1.append("\nNumber of Instances: "+training.numInstances());    //Number of instances
            jTextArea1.append("\nNumber of Features: "+training.numAttributes());     //Number of attributes
            jTextArea1.append("\nNumber of Classes: "+training.numClasses()+"\t"+training.classAttribute());     //Number of classes
            jTextArea1.append("\n\nLIST OF FEATURES:");
            for(int i=0;i<training.numAttributes()-1;i++)
                jTextArea1.append("\n"+training.attribute(i).toString());
            //Listing the number of instances according to type:
            int normal,dos,probe,r2l,u2r;
            normal=dos=probe=r2l=u2r=0;
            for(int i=0;i<training.numInstances();i++)
            {
              
                   Instance inst = training.instance(i);
          int index=(int)inst.value(training.classIndex());
          String classify=new String();
          switch(index)
          {
              case 0:
              {    
                 classify="normal";
                 normal++;
                 break;
              }   
              case 1:
              {
                classify="dos";
                dos++;
                break;
              }    
              case 2:
              {
                classify="u2r";
                u2r++;
                break;
              } 
              case 3:
              {
                classify="r2l";
                r2l++;
                break;
              }
              case 4:
              {
                classify="probe";
                probe++;
                break;
              }
          }
             
                  
            }    
            jTextArea1.append("\n\nATTACK INSTANCES ACCORDING TO TYPE:");
            jTextArea1.append("\nNormal: "+normal+"\nDoS: "+dos+"\nU2R: "+u2r+"\nR2L: "+r2l+"\nProbe: "+probe);
            
            //jTextArea1.setText(training.toSummaryString());
            //AttributeVisualizationPanel avp=new AttributeVisualizationPanel();
            
            
            
        } catch (IOException ex) {
            Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {                                         
            BufferedReader tr = null;
            try {
                tr = new BufferedReader(new FileReader(jTextField1.getText()));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }
            //BufferedReader te=new BufferedReader(new FileReader("D:\\Actual training and testing dataset\\Training and testing with normal and attack classes\\Testing_nosuccpred.arff"));
            Instances training=new Instances(tr);
            //Instances testing=new Instances(te);
            tr.close();
            //te.close();
            training.setClassIndex(training.numAttributes()-1);
           Classifier cModel = (Classifier) new NaiveBayes();
            cModel.buildClassifier(training);
            // Test the model
            weka.core.SerializationHelper.write("D:\\Actual training and testing dataset\\Output models\\nBayes1.model", cModel);
            Evaluation eTest = new Evaluation(training);
            eTest.evaluateModel(cModel, training);
            
            String strSummary = eTest.toSummaryString();
               jTextArea1.append(strSummary);
            jTextArea1.append("\n\n\n"+eTest.toClassDetailsString());
            //jTextArea1.append(eTest.);
               double[][] cmMatrix = eTest.confusionMatrix();
            jTextArea1.append("\n\n === Confusion Matrix === \n");
            jTextArea1.append("Normal\tDoS\tU2R\tR2L\tProbe\n");
            
               for(int row_i=0; row_i<cmMatrix.length; row_i++){
                for(int col_i=0; col_i<cmMatrix.length; col_i++){
                        jTextArea1.append(String.valueOf(cmMatrix[row_i][col_i]));
                    jTextArea1.append("\t");
                }
                jTextArea1.append("\n");
            }
               jTextArea1.append("\n\n==== U2R =====");
               jTextArea1.append("\nPrecision: "+ eTest.precision(2)+"\n"+"Recall: "+eTest.recall(2)+"\nFalse Positive Rate:"+eTest.falsePositiveRate(2));
               jTextArea1.append("\n\n==== R2L =====");
               jTextArea1.append("\nPrecision: "+ eTest.precision(3)+"\n"+"Recall: "+eTest.recall(3)+"\nFalse Positive Rate:"+eTest.falsePositiveRate(3));
               //jTextArea1.append("\n\n==== Test Dataset ====\n\n");
              
        } catch (IOException ex) {
            Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
        }
        jProgressBar1.setValue(100);
        jTextArea1.append("\n\n\n");
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        jDialog1.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        BufferedReader breader = null; 
    
            JFileChooser open = new JFileChooser(); // open up a file chooser (a dialog for the user to browse files to open)
            int option = open.showOpenDialog(this); // get the option that the user selected (approve or cancel)
            // NOTE: because we are OPENing a file, we call showOpenDialog~
            // if the user clicked OK, we have "APPROVE_OPTION"
            // so we want to open the file
            if(!open.getSelectedFile().getPath().endsWith("arff"))
            {
                //jDialog1.show();
                jDialog1.setVisible(true);
                
            }// TODO add your handling code here:
            else if (option == JFileChooser.APPROVE_OPTION) {
                jTextField1.setText(open.getSelectedFile().getPath()); // clear the TextArea before applying the file contents
                
            }       
            jProgressBar1.setValue(0);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
BufferedReader breader = null;
        try {
            breader = new BufferedReader (new FileReader(jTextField1.getText()));
            Instances test = null;
            test = new Instances (breader);
            test.setClassIndex(test.numAttributes()-1); 
            Classifier  cls = (Classifier) weka.core.SerializationHelper.read("D:\\Actual training and testing dataset\\Output models\\nBayes1.model");
            // Print the result à la Weka explorer:
            Evaluation eTest2 = new Evaluation(test);
            eTest2.evaluateModel(cls, test);
                      String strSummary = eTest2.toSummaryString();
               jTextArea1.append(strSummary);
            jTextArea1.append("================================ TEST DATA SET =============================");
               jTextArea1.append("\n\n\n"+eTest2.toClassDetailsString());
            //jTextArea1.append(eTest.);
               double[][] cmMatrix = eTest2.confusionMatrix();
            jTextArea1.append("\n\n === Confusion Matrix === \n");
            jTextArea1.append("Normal\tDoS\tU2R\tR2L\tProbe\n");
            
               for(int row_i=0; row_i<cmMatrix.length; row_i++){
                for(int col_i=0; col_i<cmMatrix.length; col_i++){
                        jTextArea1.append(String.valueOf(cmMatrix[row_i][col_i]));
                    jTextArea1.append("\t");
                }
                jTextArea1.append("\n");
            }
               jTextArea1.append("\n\n==== U2R =====");
               jTextArea1.append("\nPrecision: "+ eTest2.precision(2)+"\n"+"Recall: "+eTest2.recall(2)+"\nFalse Positive Rate:"+eTest2.falsePositiveRate(2));
               jTextArea1.append("\n\n==== R2L =====");
               jTextArea1.append("\nPrecision: "+ eTest2.precision(3)+"\n"+"Recall: "+eTest2.recall(3)+"\nFalse Positive Rate:"+eTest2.falsePositiveRate(3));
               // TODO add your handling code here:
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                breader.close();
            } catch (IOException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }
            jProgressBar1.setValue(100);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try {
            Instances insts = new Instances(new BufferedReader(new FileReader("D:\\Actual training and testing dataset\\Training and testing with normal and attack classes\\Testing_nosuccpred.arff")));
            Instances train = new Instances(new BufferedReader(new FileReader("D:\\Actual training and testing dataset\\Training and testing with normal and attack classes\\Training_nosuccpred.arff")));
            train.setClassIndex(train.numAttributes()-1);
            insts.setClassIndex(insts.numAttributes() - 1);
            
            Classifier nb =(Classifier) new NaiveBayes();
            nb.buildClassifier(train);
            weka.core.SerializationHelper.write("D:\\Actual training and testing dataset\\Output models\\nBayes2.model", nb);
            Classifier reeval=(Classifier) weka.core.SerializationHelper.read("D:\\Actual training and testing dataset\\Output models\\nBayes1.model");
            Evaluation eval = new Evaluation(insts);
            StringBuffer predsBuffer = new StringBuffer();
            PlainText plainText = new PlainText();
            plainText.setHeader(insts);
            plainText.setBuffer(predsBuffer);
            
            //Save Output in CSV file that can be later used
            CSV csv=new CSV();
            File output_stage1=new File("D:\\Actual training and testing dataset\\Output models\\output_stage1_6.csv");
            FileWriter filewriter=new FileWriter("D:\\Actual training and testing dataset\\Output models\\output_stage1_6.csv",true);
            StringBuffer printcsv=new StringBuffer();
            System.out.println(output_stage1.createNewFile());
            csv.setHeader(insts);
            csv.setBuffer(printcsv);
            csv.setOutputFile(output_stage1);
            eval.evaluateModel(reeval, insts, csv);
            eval.evaluateModel(reeval, insts, plainText);
            filewriter.write(printcsv.toString());
            
            jTextArea1.setText(predsBuffer.toString());        // TODO add your handling code here:
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
        }
        BayesClassifiertwo bctwo=new BayesClassifiertwo();
        bctwo.setVisible(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed

// TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Testing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
