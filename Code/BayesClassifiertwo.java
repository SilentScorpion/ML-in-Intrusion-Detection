
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import weka.classifiers.Classifier;
import weka.core.Instances;
import weka.core.Instance;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.Evaluation;
import weka.classifiers.evaluation.output.prediction.CSV;

public class BayesClassifiertwo extends javax.swing.JFrame {

    public BayesClassifiertwo() {
            initComponents();
            String features_no_r2l="1,2,3,4,5,6,11,23,24,25,26,27,28,29,32,33,34,36,38,39,40,41";
            String features_no_u2r="1,2,3,4,5,6,10,12,13,14,16,17,18,19,23,24,29,32,33,34,36,37,41";
            jTextArea2.setText("Selected Features for R2L attack are:\n"+features_no_r2l);
            jTextArea2.append("\n\nSelected Features for U2R attack are:\n"+features_no_u2r);
            //String feature_names="duration,protocol_type,service,flag,src_bytes,dst_bytes,dos,hot,num_failed_logins,logged_in,num_compromised";
            //String feature_names2="root_shell,su_attempted,num_root,num_file_creations,num_shells,num_access_files,count,srv_count,same_srv_rate";
            //String feature_names3="dst_host_count,dst_host_srv_count,dst_host_same_srv_rate,dst_host_same_src_port_rate,dst_host_srv_diff_host_rate,dst_host_srv_rerror_rate";
            //jTextArea2.append("\nFeature Names:\n"+feature_names+"\n"+feature_names2+"\n"+feature_names3);
        }
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Misclassified Instances");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Run R2L Classifier");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Exit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Features Selected");

        jLabel3.setText("Summary");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton4.setText("Run U2R Classifier");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 12, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(25, 25, 25)
                .addComponent(jLabel2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
this.hide();   // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       BufferedReader opstage1reader = null;
    try {
         //for(int i=0;i<)
         opstage1reader = new BufferedReader(new FileReader("D:\\Actual training and testing dataset\\Output models\\opstage1_predictions_preprocessed.arff"));
       
        Instances opstage1=new Instances(opstage1reader);
        double []actual=new double[opstage1.numInstances()];
       double []predicted=new double[opstage1.numInstances()];
       boolean select_instances[]=new boolean[opstage1.numInstances()];
        int count=0;
        for(int i=0;i<opstage1.numInstances();i++)
        {
            actual[i]=opstage1.instance(i).value(1);
            predicted[i]=opstage1.instance(i).value(2);
           // System.out.println(actual[i]+"\t"+predicted[i]);
         // System.out.println(opstage1.instance(i).value(0)+"\t"+actual[i]+"\t"+predicted[i]);
            if((actual[i]!=predicted[i])&& actual[i]==2)
            {
                count++;
                select_instances[i]=true;

            }    
            System.out.println(i+"\t"+select_instances[i]);
        } 
        /* 
        Now its time to remove the instances that are classified correctly
       The misclassified instances will be applied to the next stage of the classification process
        The next stage classifier is also a Naive Bayes classifier with only certain features selected
        The features selected are obtained from the Genetic Algorithm found in GAtest.java
        */    
        BufferedReader test=new BufferedReader(new FileReader("D:\\Actual training and testing dataset\\Training and testing with normal and attack classes\\Testing_nosuccpred.arff"));
        Instances testing=new Instances(test);
        testing.setClassIndex(testing.numAttributes()-1);
        //File misclassified_instances=new File("D:\\Actual training and testing dataset\\Output models\\misclassified_stage1_2.arff");
        //FileWriter f=new FileWriter("D:\\Actual training and testing dataset\\Output models\\misclassified_stage1_2.arff",true);
         //File misclassified_instances1=new File("D:\\Actual training and testing dataset\\Output models\\misclassified_stage1_1.arff");
        //FileWriter f1=new FileWriter("D:\\Actual training and testing dataset\\Output models\\misclassified_stage1_1.arff",true);
        
//System.out.println(testing.instance(0));
        for(int i=testing.numInstances()-1;i>=0;i--)
        {
            if(!select_instances[i])
            {
                testing.remove(i);
            }    
        }
        for(int i=0;i<testing.numInstances();i++)
            System.out.println(testing.instance(i));
        System.out.println(testing.numInstances());
        //f.write(testing.toString());
        for(int i=6400;i<testing.numInstances()-1;i++)
            System.out.println(testing.instance(i));
         jTextArea1.append(testing.toString());
    } catch (FileNotFoundException ex) {
        Logger.getLogger(BayesClassifiertwo.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(BayesClassifiertwo.class.getName()).log(Level.SEVERE, null, ex);
    } finally {
        try {
            opstage1reader.close();
        } catch (IOException ex) {
            Logger.getLogger(BayesClassifiertwo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        try {
            /*
            
            
            BufferedReader br=new BufferedReader(new FileReader("D:\\Actual training and testing dataset\\Output models\\op_misclassified.arff"));// TODO add your handling code here:
            BufferedReader train=new BufferedReader(new FileReader("D:\\Actual training and testing dataset\\Training and testing with normal and attack classes\\Training_nosuccpred.arff"));
            Instances testingstage2=new Instances(br);
            Instances trainingstage2=new Instances(train);
            br.close();
            train.close();
            int f=Integer.parseInt(jTextField1.getText());
            if(f==1)                    //R2L attributes
            {
            trainingstage2.deleteAttributeAt(6);
            trainingstage2.deleteAttributeAt(6);
            trainingstage2.deleteAttributeAt(6);
            trainingstage2.deleteAttributeAt(6);
            trainingstage2.deleteAttributeAt(7);
            trainingstage2.deleteAttributeAt(7);
            trainingstage2.deleteAttributeAt(7);
            trainingstage2.deleteAttributeAt(7);
            trainingstage2.deleteAttributeAt(7);
            trainingstage2.deleteAttributeAt(7);
            trainingstage2.deleteAttributeAt(7);
            trainingstage2.deleteAttributeAt(7);
            trainingstage2.deleteAttributeAt(7);
            trainingstage2.deleteAttributeAt(7);
            trainingstage2.deleteAttributeAt(7);
            trainingstage2.deleteAttributeAt(14);
            trainingstage2.deleteAttributeAt(14);
            trainingstage2.deleteAttributeAt(17);
            trainingstage2.deleteAttributeAt(18);
            for(int i=0;i<trainingstage2.numAttributes();i++)
            System.out.println(trainingstage2.attribute(i));
            }
            else if(f==0)   //U2R attributes
            {
            trainingstage2.deleteAttributeAt(6);
            trainingstage2.deleteAttributeAt(6);
            trainingstage2.deleteAttributeAt(6);
            trainingstage2.deleteAttributeAt(7);
            trainingstage2.deleteAttributeAt(10);
            trainingstage2.deleteAttributeAt(14);
            trainingstage2.deleteAttributeAt(14);
            trainingstage2.deleteAttributeAt(14);
            trainingstage2.deleteAttributeAt(16);
            trainingstage2.deleteAttributeAt(16);
            trainingstage2.deleteAttributeAt(16);
            trainingstage2.deleteAttributeAt(16);
            trainingstage2.deleteAttributeAt(17);
            trainingstage2.deleteAttributeAt(17);
            trainingstage2.deleteAttributeAt(20);
            trainingstage2.deleteAttributeAt(22);
            trainingstage2.deleteAttributeAt(22);
            trainingstage2.deleteAttributeAt(22);
            testingstage2.deleteAttributeAt(6);
            testingstage2.deleteAttributeAt(6);
            testingstage2.deleteAttributeAt(6);
            testingstage2.deleteAttributeAt(7);
            testingstage2.deleteAttributeAt(10);
            testingstage2.deleteAttributeAt(14);
            testingstage2.deleteAttributeAt(14);
            testingstage2.deleteAttributeAt(14);
            testingstage2.deleteAttributeAt(16);
            testingstage2.deleteAttributeAt(16);
            testingstage2.deleteAttributeAt(16);
            testingstage2.deleteAttributeAt(16);
            testingstage2.deleteAttributeAt(17);
            testingstage2.deleteAttributeAt(17);
            testingstage2.deleteAttributeAt(20);
            testingstage2.deleteAttributeAt(22);
            testingstage2.deleteAttributeAt(22);
            testingstage2.deleteAttributeAt(22);
            //System.out.println(trainingstage2.attribute(17));
            /*for(int i=0;i<trainingstage2.numAttributes();i++)
            {
            System.out.println(trainingstage2.attribute(i));
            }
            trainingstage2.setClassIndex(trainingstage2.numAttributes()-1);
            testingstage2.setClassIndex(testingstage2.numAttributes()-1);
            Classifier nb=(Classifier)new NaiveBayes();
            nb.buildClassifier(trainingstage2);
            Evaluation estage2=new Evaluation(trainingstage2);
            jTextArea1.append(estage2.toSummaryString());
            weka.core.SerializationHelper.write("D:\\Actual training and testing dataset\\Output models\\stage2trainingmodel.model", nb);
            Classifier reeval=(Classifier) weka.core.SerializationHelper.read("D:\\Actual training and testing dataset\\Output models\\stage2trainingmodel.model");
            Evaluation eval = new Evaluation(testingstage2);
            eval.evaluateModel(reeval, testingstage2);
            jTextArea1.append(eval.toSummaryString());
            
            
            
            
            }
            
            else
            System.out.println("invalid input");
            } catch (FileNotFoundException ex) {
            Logger.getLogger(BayesClassifiertwo.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
            Logger.getLogger(BayesClassifiertwo.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
            Logger.getLogger(BayesClassifiertwo.class.getName()).log(Level.SEVERE, null, ex);
            }*/
            
            
            //Read directly from the output stage 2 file saved in outputstage2 folder
            BufferedReader train=new BufferedReader(new FileReader("D:\\Actual training and testing dataset\\Output stage 2\\stage2_training_r2l_select.arff"));
            BufferedReader test=new BufferedReader(new FileReader("D:\\Actual training and testing dataset\\Output stage 2\\r2l_misclassified_select.arff"));
            Instances training=new Instances(train);
            Instances testing =new Instances(test);
            training.setClassIndex(training.numAttributes()-1);
            testing.setClassIndex(testing.numAttributes()-1);
            Classifier eval=(Classifier)new NaiveBayes();
            eval.buildClassifier(training);
            Evaluation e=new Evaluation(training);
            weka.core.SerializationHelper.write("D:\\Actual training and testing dataset\\Output stage 2\\stage2_r2l_train_select1.model",eval);
            Classifier reeval=(Classifier) weka.core.SerializationHelper.read("D:\\Actual training and testing dataset\\Output stage 2\\stage2_r2l_train_select1.model");
            Evaluation outputstage2=new Evaluation(testing);
            outputstage2.evaluateModel(reeval, testing);
            jTextArea1.append(outputstage2.toSummaryString());
            
        
        
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(BayesClassifiertwo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(BayesClassifiertwo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(BayesClassifiertwo.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
BufferedReader train=null;
        try {
            train = new BufferedReader(new FileReader("D:\\Actual training and testing dataset\\Output stage 2\\stage2_training_u2r_select.arff"));
            BufferedReader test=new BufferedReader(new FileReader("D:\\Actual training and testing dataset\\Output stage 2\\u2r_misclassified_select.arff"));
            Instances training=new Instances(train);
            Instances testing =new Instances(test);
            training.setClassIndex(training.numAttributes()-1);
            testing.setClassIndex(testing.numAttributes()-1);
            Classifier eval=(Classifier)new NaiveBayes();
            eval.buildClassifier(training);
            Evaluation e=new Evaluation(training);
            weka.core.SerializationHelper.write("D:\\Actual training and testing dataset\\Output stage 2\\stage2_u2r_train_select1.model",eval);
            Classifier reeval=(Classifier) weka.core.SerializationHelper.read("D:\\Actual training and testing dataset\\Output stage 2\\stage2_u2r_train_select1.model");
            Evaluation outputstage2=new Evaluation(testing);
            outputstage2.evaluateModel(reeval, testing);
            jTextArea1.append(outputstage2.toSummaryString());        // TODO add your handling code here:
        } catch (FileNotFoundException ex) {
            Logger.getLogger(BayesClassifiertwo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(BayesClassifiertwo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(BayesClassifiertwo.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                train.close();
            } catch (IOException ex) {
                Logger.getLogger(BayesClassifiertwo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BayesClassifiertwo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BayesClassifiertwo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BayesClassifiertwo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BayesClassifiertwo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BayesClassifiertwo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
